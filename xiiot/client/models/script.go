// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Script Script is object model for script
//
// Script represent lambdas:
// functions or transformations that can be applied
// to DataStreams.
// Scripts are tenant-wide objects and the same script
// may be run within an edge, across all edges of a tenant
// or on tenant data in the cloud.
// swagger:model Script
type Script struct {

	// The source code for the script.
	// Post .NEXT Nice we will extend this to support containers as well.
	// Required: true
	Code *string `json:"code"`

	// Description of the script
	Description string `json:"description,omitempty"`

	// Environment for the script to run in.
	// In addition to default environment provided by fission,
	// we will also create some custom environments. E.g., we will
	// have our custom python env with tensorflow libs, etc.
	// Required: true
	Environment *string `json:"environment"`

	// ID
	ID string `json:"id,omitempty"`

	// Programming langulage the code is written in.
	// Supported languages are:
	// python
	// javascript
	// Required: true
	Language *string `json:"language"`

	// name of the script
	// Required: true
	Name *string `json:"name"`

	// Array of script parameters.
	// Required: true
	Params []*ScriptParam `json:"params"`

	// ID of parent project, required for custom (non-builtin) scripts.
	ProjectID string `json:"projectId,omitempty"`

	// ID of the ScriptRuntime to use to run this script
	RuntimeID string `json:"runtimeId,omitempty"`

	// Docker image tag of the ScriptRuntime to use to run this script.
	// If missing or empty, then backend should treat it as "latest"
	RuntimeTag string `json:"runtimeTag,omitempty"`

	// type of the script.
	// A Transformation takes a DataStream (Kafka topic) as input and produces
	// another DataStream (Kafka topic) as output.
	// A Function takes a DataStream as input,
	// but has no constraint on output.
	// Required: true
	// Enum: [Transformation Function]
	Type *string `json:"type"`
}

// Validate validates this script
func (m *Script) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Script) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *Script) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *Script) validateLanguage(formats strfmt.Registry) error {

	if err := validate.Required("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *Script) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Script) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("params", "body", m.Params); err != nil {
		return err
	}

	for i := 0; i < len(m.Params); i++ {
		if swag.IsZero(m.Params[i]) { // not required
			continue
		}

		if m.Params[i] != nil {
			if err := m.Params[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var scriptTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Transformation","Function"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scriptTypeTypePropEnum = append(scriptTypeTypePropEnum, v)
	}
}

const (

	// ScriptTypeTransformation captures enum value "Transformation"
	ScriptTypeTransformation string = "Transformation"

	// ScriptTypeFunction captures enum value "Function"
	ScriptTypeFunction string = "Function"
)

// prop value enum
func (m *Script) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, scriptTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Script) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Script) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Script) UnmarshalBinary(b []byte) error {
	var res Script
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
