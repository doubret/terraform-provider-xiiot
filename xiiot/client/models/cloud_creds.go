// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudCreds CloudCreds is the object model for cloud creds
// swagger:model CloudCreds
type CloudCreds struct {

	// Description for the cloud cred.
	// Required: true
	Description *string `json:"description"`

	// ID
	ID string `json:"id,omitempty"`

	// Name for the cloud cred.
	// Required: true
	Name *string `json:"name"`

	// Cloud type for this cloud cred.
	// Required: true
	// Enum: [AWS GCP Azure]
	Type *string `json:"type"`

	// aws credential
	AwsCredential *AWSCredential `json:"awsCredential,omitempty"`

	// gcp credential
	GcpCredential *GCPCredential `json:"gcpCredential,omitempty"`
}

// Validate validates this cloud creds
func (m *CloudCreds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsCredential(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpCredential(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudCreds) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *CloudCreds) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var cloudCredsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","GCP","Azure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudCredsTypeTypePropEnum = append(cloudCredsTypeTypePropEnum, v)
	}
}

const (

	// CloudCredsTypeAWS captures enum value "AWS"
	CloudCredsTypeAWS string = "AWS"

	// CloudCredsTypeGCP captures enum value "GCP"
	CloudCredsTypeGCP string = "GCP"

	// CloudCredsTypeAzure captures enum value "Azure"
	CloudCredsTypeAzure string = "Azure"
)

// prop value enum
func (m *CloudCreds) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudCredsTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudCreds) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *CloudCreds) validateAwsCredential(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsCredential) { // not required
		return nil
	}

	if m.AwsCredential != nil {
		if err := m.AwsCredential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsCredential")
			}
			return err
		}
	}

	return nil
}

func (m *CloudCreds) validateGcpCredential(formats strfmt.Registry) error {

	if swag.IsZero(m.GcpCredential) { // not required
		return nil
	}

	if m.GcpCredential != nil {
		if err := m.GcpCredential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpCredential")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudCreds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudCreds) UnmarshalBinary(b []byte) error {
	var res CloudCreds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
