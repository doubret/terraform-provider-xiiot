// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContainerRegistry ContainerRegistry is the object model for ContainerRegistry
// swagger:model ContainerRegistry
type ContainerRegistry struct {

	// The CloudCreds to import ContainerRegistry Profile from
	//
	// Required if Type == AWS || Type == GCP
	CloudCredsID string `json:"cloudCredsID,omitempty"`

	// Description for the ContainerRegistry.
	Description string `json:"description,omitempty"`

	// ContainerRegistry email.
	//
	// Required if Type == ContainerRegistry
	Email string `json:"email,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// Name for the ContainerRegistry.
	// Required: true
	Name *string `json:"name"`

	// ContainerRegistry  Password.
	//
	// Required if Type == ContainerRegistry
	Pwd string `json:"pwd,omitempty"`

	// ContainerRegistry  server.
	// Required: true
	Server *string `json:"server"`

	// ContainerRegistry type.
	// Required: true
	// Enum: [AWS GCP Azure ContainerRegistry]
	Type *string `json:"type"`

	// ContainerRegistry user name.
	//
	// Required if Type == ContainerRegistry
	UserName string `json:"userName,omitempty"`
}

// Validate validates this container registry
func (m *ContainerRegistry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerRegistry) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ContainerRegistry) validateServer(formats strfmt.Registry) error {

	if err := validate.Required("server", "body", m.Server); err != nil {
		return err
	}

	return nil
}

var containerRegistryTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","GCP","Azure","ContainerRegistry"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		containerRegistryTypeTypePropEnum = append(containerRegistryTypeTypePropEnum, v)
	}
}

const (

	// ContainerRegistryTypeAWS captures enum value "AWS"
	ContainerRegistryTypeAWS string = "AWS"

	// ContainerRegistryTypeGCP captures enum value "GCP"
	ContainerRegistryTypeGCP string = "GCP"

	// ContainerRegistryTypeAzure captures enum value "Azure"
	ContainerRegistryTypeAzure string = "Azure"

	// ContainerRegistryTypeContainerRegistry captures enum value "ContainerRegistry"
	ContainerRegistryTypeContainerRegistry string = "ContainerRegistry"
)

// prop value enum
func (m *ContainerRegistry) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, containerRegistryTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ContainerRegistry) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContainerRegistry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContainerRegistry) UnmarshalBinary(b []byte) error {
	var res ContainerRegistry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
