// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User User is object model for user
//
// User
// User of Sherlock system.
// swagger:model User
type User struct {

	// Email of user
	// Required: true
	Email *string `json:"email"`

	// ID
	ID string `json:"id,omitempty"`

	// User name
	// Required: true
	Name *string `json:"name"`

	// SHA-256 hash of user password
	// Required: true
	Password *string `json:"password"`

	// User role.
	// Enum: [INFRA_ADMIN USER]
	Role string `json:"role,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *User) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

var userTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INFRA_ADMIN","USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeRolePropEnum = append(userTypeRolePropEnum, v)
	}
}

const (

	// UserRoleINFRAADMIN captures enum value "INFRA_ADMIN"
	UserRoleINFRAADMIN string = "INFRA_ADMIN"

	// UserRoleUSER captures enum value "USER"
	UserRoleUSER string = "USER"
)

// prop value enum
func (m *User) validateRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userTypeRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *User) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
