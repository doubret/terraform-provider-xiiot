// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Sensor Sensor is object model for sensor
//
// For .NEXT Nice we do not have a way to identify a sensor (e.g., via certificate).
// The sensor discovery service will make wildcard (#) subscription to
// mqtt server and report each distinct mqtt topic as a sensor.
// swagger:model Sensor
type Sensor struct {

	// edge ID
	// Required: true
	EdgeID *string `json:"edgeId"`

	// ID
	ID string `json:"id,omitempty"`

	// mqtt topic name that identifies the sensor.
	// Required: true
	TopicName *string `json:"topicName"`
}

// Validate validates this sensor
func (m *Sensor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEdgeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopicName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Sensor) validateEdgeID(formats strfmt.Registry) error {

	if err := validate.Required("edgeId", "body", m.EdgeID); err != nil {
		return err
	}

	return nil
}

func (m *Sensor) validateTopicName(formats strfmt.Registry) error {

	if err := validate.Required("topicName", "body", m.TopicName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Sensor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Sensor) UnmarshalBinary(b []byte) error {
	var res Sensor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
