// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Edge Edge is the DB object and object model for edge
//
// An Edge is a Nutanix (Kubernetes) cluster for a tenant.
// swagger:model Edge
type Edge struct {

	// Whether the edge is currently connected to cloudmgmt.
	Connected bool `json:"connected,omitempty"`

	// Description of the edge
	Description string `json:"description,omitempty"`

	// number of devices (nodes) in this edge
	// Required: true
	EdgeDevices *float64 `json:"edgeDevices"`

	// Gateway IP for the edge
	// Required: true
	Gateway *string `json:"gateway"`

	// ID
	ID string `json:"id,omitempty"`

	// IP Address for the edge
	// Required: true
	IPAddress *string `json:"ipAddress"`

	// A list of CategoryInfo used as label to this Edge.
	Labels []*CategoryInfo `json:"labels"`

	// name for the edge
	// Max edge name is determined by kubernetes
	// https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go
	// Required: true
	Name *string `json:"name"`

	// serial number for the edge
	// Required: true
	SerialNumber *string `json:"serialNumber"`

	// storage capacity in GB
	// Required: true
	StorageCapacity *float64 `json:"storageCapacity"`

	// storage usage in GB
	// Required: true
	StorageUsage *float64 `json:"storageUsage"`

	// Subnet mask for the edge
	// Required: true
	Subnet *string `json:"subnet"`
}

// Validate validates this edge
func (m *Edge) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEdgeDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Edge) validateEdgeDevices(formats strfmt.Registry) error {

	if err := validate.Required("edgeDevices", "body", m.EdgeDevices); err != nil {
		return err
	}

	return nil
}

func (m *Edge) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *Edge) validateIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("ipAddress", "body", m.IPAddress); err != nil {
		return err
	}

	return nil
}

func (m *Edge) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for i := 0; i < len(m.Labels); i++ {
		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {
			if err := m.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Edge) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Edge) validateSerialNumber(formats strfmt.Registry) error {

	if err := validate.Required("serialNumber", "body", m.SerialNumber); err != nil {
		return err
	}

	return nil
}

func (m *Edge) validateStorageCapacity(formats strfmt.Registry) error {

	if err := validate.Required("storageCapacity", "body", m.StorageCapacity); err != nil {
		return err
	}

	return nil
}

func (m *Edge) validateStorageUsage(formats strfmt.Registry) error {

	if err := validate.Required("storageUsage", "body", m.StorageUsage); err != nil {
		return err
	}

	return nil
}

func (m *Edge) validateSubnet(formats strfmt.Registry) error {

	if err := validate.Required("subnet", "body", m.Subnet); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Edge) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Edge) UnmarshalBinary(b []byte) error {
	var res Edge
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
