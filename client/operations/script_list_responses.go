// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/doubret/terraform-provider-xiiot/models"
)

// ScriptListReader is a Reader for the ScriptList structure.
type ScriptListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ScriptListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewScriptListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewScriptListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewScriptListDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewScriptListOK creates a ScriptListOK with default headers values
func NewScriptListOK() *ScriptListOK {
	return &ScriptListOK{}
}

/*ScriptListOK handles this case with default header values.

Ok
*/
type ScriptListOK struct {
	Payload []*models.Script
}

func (o *ScriptListOK) Error() string {
	return fmt.Sprintf("[GET /scripts][%d] scriptListOK  %+v", 200, o.Payload)
}

func (o *ScriptListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewScriptListBadRequest creates a ScriptListBadRequest with default headers values
func NewScriptListBadRequest() *ScriptListBadRequest {
	return &ScriptListBadRequest{}
}

/*ScriptListBadRequest handles this case with default header values.

Bad request
*/
type ScriptListBadRequest struct {
}

func (o *ScriptListBadRequest) Error() string {
	return fmt.Sprintf("[GET /scripts][%d] scriptListBadRequest ", 400)
}

func (o *ScriptListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewScriptListDefault creates a ScriptListDefault with default headers values
func NewScriptListDefault(code int) *ScriptListDefault {
	return &ScriptListDefault{
		_statusCode: code,
	}
}

/*ScriptListDefault handles this case with default header values.

Unexpected error
*/
type ScriptListDefault struct {
	_statusCode int
}

// Code gets the status code for the script list default response
func (o *ScriptListDefault) Code() int {
	return o._statusCode
}

func (o *ScriptListDefault) Error() string {
	return fmt.Sprintf("[GET /scripts][%d] ScriptList default ", o._statusCode)
}

func (o *ScriptListDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
