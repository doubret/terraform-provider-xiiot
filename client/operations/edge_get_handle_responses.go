// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/doubret/terraform-provider-xiiot/models"
)

// EdgeGetHandleReader is a Reader for the EdgeGetHandle structure.
type EdgeGetHandleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EdgeGetHandleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewEdgeGetHandleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewEdgeGetHandleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewEdgeGetHandleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewEdgeGetHandleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEdgeGetHandleOK creates a EdgeGetHandleOK with default headers values
func NewEdgeGetHandleOK() *EdgeGetHandleOK {
	return &EdgeGetHandleOK{}
}

/*EdgeGetHandleOK handles this case with default header values.

Ok
*/
type EdgeGetHandleOK struct {
	Payload *models.EdgeCert
}

func (o *EdgeGetHandleOK) Error() string {
	return fmt.Sprintf("[POST /edgehandle/{edgeId}][%d] edgeGetHandleOK  %+v", 200, o.Payload)
}

func (o *EdgeGetHandleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EdgeCert)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeGetHandleBadRequest creates a EdgeGetHandleBadRequest with default headers values
func NewEdgeGetHandleBadRequest() *EdgeGetHandleBadRequest {
	return &EdgeGetHandleBadRequest{}
}

/*EdgeGetHandleBadRequest handles this case with default header values.

Bad request
*/
type EdgeGetHandleBadRequest struct {
}

func (o *EdgeGetHandleBadRequest) Error() string {
	return fmt.Sprintf("[POST /edgehandle/{edgeId}][%d] edgeGetHandleBadRequest ", 400)
}

func (o *EdgeGetHandleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEdgeGetHandleNotFound creates a EdgeGetHandleNotFound with default headers values
func NewEdgeGetHandleNotFound() *EdgeGetHandleNotFound {
	return &EdgeGetHandleNotFound{}
}

/*EdgeGetHandleNotFound handles this case with default header values.

Edge not found
*/
type EdgeGetHandleNotFound struct {
}

func (o *EdgeGetHandleNotFound) Error() string {
	return fmt.Sprintf("[POST /edgehandle/{edgeId}][%d] edgeGetHandleNotFound ", 404)
}

func (o *EdgeGetHandleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEdgeGetHandleDefault creates a EdgeGetHandleDefault with default headers values
func NewEdgeGetHandleDefault(code int) *EdgeGetHandleDefault {
	return &EdgeGetHandleDefault{
		_statusCode: code,
	}
}

/*EdgeGetHandleDefault handles this case with default header values.

Unexpected error
*/
type EdgeGetHandleDefault struct {
	_statusCode int
}

// Code gets the status code for the edge get handle default response
func (o *EdgeGetHandleDefault) Code() int {
	return o._statusCode
}

func (o *EdgeGetHandleDefault) Error() string {
	return fmt.Sprintf("[POST /edgehandle/{edgeId}][%d] EdgeGetHandle default ", o._statusCode)
}

func (o *EdgeGetHandleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
