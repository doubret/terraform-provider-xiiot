// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DockerProfile DockerProfile is the object model for DockerProfile
// swagger:model DockerProfile
type DockerProfile struct {

	// The CloudCreds to import Docker Profile from
	CloudCredsID string `json:"cloudCredsID,omitempty"`

	// The Credentials of the DockerProfile.
	Credentials string `json:"credentials,omitempty"`

	// Description for the DockerProfile.
	Description string `json:"description,omitempty"`

	// DockerProfile  email.
	Email string `json:"email,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// Name for the DockerProfile.
	// Required: true
	Name *string `json:"name"`

	// DockerProfile  Password.
	Pwd string `json:"pwd,omitempty"`

	// DockerProfile  server.
	// Required: true
	Server *string `json:"server"`

	// DockerProfile  type.
	// Required: true
	// Enum: [AWS GCP Azure ContainerRegistry]
	Type *string `json:"type"`

	// DockerProfile  user.
	UserName string `json:"userName,omitempty"`
}

// Validate validates this docker profile
func (m *DockerProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DockerProfile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DockerProfile) validateServer(formats strfmt.Registry) error {

	if err := validate.Required("server", "body", m.Server); err != nil {
		return err
	}

	return nil
}

var dockerProfileTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","GCP","Azure","ContainerRegistry"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dockerProfileTypeTypePropEnum = append(dockerProfileTypeTypePropEnum, v)
	}
}

const (

	// DockerProfileTypeAWS captures enum value "AWS"
	DockerProfileTypeAWS string = "AWS"

	// DockerProfileTypeGCP captures enum value "GCP"
	DockerProfileTypeGCP string = "GCP"

	// DockerProfileTypeAzure captures enum value "Azure"
	DockerProfileTypeAzure string = "Azure"

	// DockerProfileTypeContainerRegistry captures enum value "ContainerRegistry"
	DockerProfileTypeContainerRegistry string = "ContainerRegistry"
)

// prop value enum
func (m *DockerProfile) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dockerProfileTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DockerProfile) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DockerProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DockerProfile) UnmarshalBinary(b []byte) error {
	var res DockerProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
