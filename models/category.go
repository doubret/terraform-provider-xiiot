// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Category Category is object model for Category
//
// Category
// Similar to labels for Kubernetes.
// For Nice we only support limited (implicit) category composition
// when a class is specified as a list of categories:
// OR - among different category values from the same key
// AND - among different category keys
// Post Nice we should support more general (explicit) category compositions such as
// AND, OR, NOT
// among sensible category combinations.
// swagger:model Category
type Category struct {

	// ID
	ID string `json:"id,omitempty"`

	// Unique name that identifies a category.
	// E.g., Airport, Terminal, Floor, Environment, Department, etc.
	// Required: true
	Name *string `json:"name"`

	// Purpose of the category.
	// Required: true
	Purpose *string `json:"purpose"`

	// All allowed values for the category.
	// E.g.,
	// SFO, ORD, LAX, ...
	// 1, 2, 3, ...
	// Production, Dev, Test, ...
	// Sales, HR, Eng, ...
	// Required: true
	Values []string `json:"values"`
}

// Validate validates this category
func (m *Category) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurpose(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Category) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Category) validatePurpose(formats strfmt.Registry) error {

	if err := validate.Required("purpose", "body", m.Purpose); err != nil {
		return err
	}

	return nil
}

func (m *Category) validateValues(formats strfmt.Registry) error {

	if err := validate.Required("values", "body", m.Values); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Category) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Category) UnmarshalBinary(b []byte) error {
	var res Category
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
