// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EdgeCert EdgeCert is DB and object model for data source
// swagger:model EdgeCert
type EdgeCert struct {

	// Root CA certificate for the tenant.
	// Required: true
	CACertificate *string `json:"CACertificate"`

	// Certificate for the edge using old/fixed root CA.
	// Required: true
	Certificate *string `json:"certificate"`

	// Certificate for mqtt client on the edge
	// Required: true
	ClientCertificate *string `json:"clientCertificate"`

	// Encrypted private key corresponding to the client certificate.
	// Required: true
	ClientPrivateKey *string `json:"clientPrivateKey"`

	// Certificate for the edge using per-tenant root CA.
	// Required: true
	EdgeCertificate *string `json:"edgeCertificate"`

	// edge ID
	// Required: true
	EdgeID *string `json:"edgeId"`

	// Encrypted private key using per-tenant root CA.
	// Required: true
	EdgePrivateKey *string `json:"edgePrivateKey"`

	// ID
	ID string `json:"id,omitempty"`

	// locked
	Locked bool `json:"locked,omitempty"`

	// Encrypted private key using old/fixed root CA.
	// Required: true
	PrivateKey *string `json:"privateKey"`
}

// Validate validates this edge cert
func (m *EdgeCert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCACertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientPrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeCert) validateCACertificate(formats strfmt.Registry) error {

	if err := validate.Required("CACertificate", "body", m.CACertificate); err != nil {
		return err
	}

	return nil
}

func (m *EdgeCert) validateCertificate(formats strfmt.Registry) error {

	if err := validate.Required("certificate", "body", m.Certificate); err != nil {
		return err
	}

	return nil
}

func (m *EdgeCert) validateClientCertificate(formats strfmt.Registry) error {

	if err := validate.Required("clientCertificate", "body", m.ClientCertificate); err != nil {
		return err
	}

	return nil
}

func (m *EdgeCert) validateClientPrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("clientPrivateKey", "body", m.ClientPrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *EdgeCert) validateEdgeCertificate(formats strfmt.Registry) error {

	if err := validate.Required("edgeCertificate", "body", m.EdgeCertificate); err != nil {
		return err
	}

	return nil
}

func (m *EdgeCert) validateEdgeID(formats strfmt.Registry) error {

	if err := validate.Required("edgeId", "body", m.EdgeID); err != nil {
		return err
	}

	return nil
}

func (m *EdgeCert) validateEdgePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("edgePrivateKey", "body", m.EdgePrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *EdgeCert) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EdgeCert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgeCert) UnmarshalBinary(b []byte) error {
	var res EdgeCert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
