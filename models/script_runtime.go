// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScriptRuntime ScriptRuntime is the DB object and object model for script runtime
//
// A ScriptRuntime is a Docker container runtime for scripts.
// Sherlock ships with several ScriptRuntimes for builtin (and user defined) scripts.
// User can also create custom ScriptRuntimes which may be
// derived from Sherlock bundled ScriptRuntimes.
// swagger:model ScriptRuntime
type ScriptRuntime struct {

	// Description of the script runtime
	Description string `json:"description,omitempty"`

	// ID for the DockerProfile (Container registry profile) used by this script runtime.
	DockerProfileID string `json:"dockerProfileID,omitempty"`

	// Docker repository URI of the script runtime
	DockerRepoURI string `json:"dockerRepoURI,omitempty"`

	// Dockerfile for the script runtime. Serves as documentation for the script runtime.
	Dockerfile string `json:"dockerfile,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// language of the script runtime
	// Required: true
	Language *string `json:"language"`

	// name of the script runtime
	// Required: true
	Name *string `json:"name"`

	// ID of parent project, required for custom (non-builtin) script runtimes.
	ProjectID string `json:"projectId,omitempty"`
}

// Validate validates this script runtime
func (m *ScriptRuntime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScriptRuntime) validateLanguage(formats strfmt.Registry) error {

	if err := validate.Required("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *ScriptRuntime) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScriptRuntime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScriptRuntime) UnmarshalBinary(b []byte) error {
	var res ScriptRuntime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
