// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Project Project is object model for project
//
// A Project is logical grouping of resouces.
// (Edges, CloudCreds, Users, DataStreams, etc.)
// swagger:model Project
type Project struct {

	// List of ids of cloud credentials this project has access to.
	// Required: true
	CloudCredentialIds []string `json:"cloudCredentialIds"`

	// description for the project
	// Required: true
	Description *string `json:"description"`

	// List of ids of docker profiles this project has access to.
	// Required: true
	DockerProfileIds []string `json:"dockerProfileIds"`

	// List of ids of edges belong to this project.
	// Only relevant when edgeSelectorType === 'Explicit'
	EdgeIds []string `json:"edgeIds"`

	// Type of edge selector. Either 'Category' or 'Explicit'
	// Specify whether edges belonging to this project are
	// given by edgeIds ('Explicit') or edgeSelectors ('Category').
	// Required: true
	// Enum: [Category Explicit]
	EdgeSelectorType *string `json:"edgeSelectorType"`

	// Edge selectors - CategoryInfo list.
	// Only relevant when edgeSelectorType === 'Category'
	EdgeSelectors []*CategoryInfo `json:"edgeSelectors"`

	// ID
	ID string `json:"id,omitempty"`

	// name for the project
	// Required: true
	Name *string `json:"name"`

	// List of info of users who have access to this project.
	// Required: true
	Users []*ProjectUserInfo `json:"users"`
}

// Validate validates this project
func (m *Project) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudCredentialIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDockerProfileIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeSelectorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeSelectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Project) validateCloudCredentialIds(formats strfmt.Registry) error {

	if err := validate.Required("cloudCredentialIds", "body", m.CloudCredentialIds); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateDockerProfileIds(formats strfmt.Registry) error {

	if err := validate.Required("dockerProfileIds", "body", m.DockerProfileIds); err != nil {
		return err
	}

	return nil
}

var projectTypeEdgeSelectorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Category","Explicit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectTypeEdgeSelectorTypePropEnum = append(projectTypeEdgeSelectorTypePropEnum, v)
	}
}

const (

	// ProjectEdgeSelectorTypeCategory captures enum value "Category"
	ProjectEdgeSelectorTypeCategory string = "Category"

	// ProjectEdgeSelectorTypeExplicit captures enum value "Explicit"
	ProjectEdgeSelectorTypeExplicit string = "Explicit"
)

// prop value enum
func (m *Project) validateEdgeSelectorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, projectTypeEdgeSelectorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Project) validateEdgeSelectorType(formats strfmt.Registry) error {

	if err := validate.Required("edgeSelectorType", "body", m.EdgeSelectorType); err != nil {
		return err
	}

	// value enum
	if err := m.validateEdgeSelectorTypeEnum("edgeSelectorType", "body", *m.EdgeSelectorType); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateEdgeSelectors(formats strfmt.Registry) error {

	if swag.IsZero(m.EdgeSelectors) { // not required
		return nil
	}

	for i := 0; i < len(m.EdgeSelectors); i++ {
		if swag.IsZero(m.EdgeSelectors[i]) { // not required
			continue
		}

		if m.EdgeSelectors[i] != nil {
			if err := m.EdgeSelectors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("edgeSelectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Project) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateUsers(formats strfmt.Registry) error {

	if err := validate.Required("users", "body", m.Users); err != nil {
		return err
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Project) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Project) UnmarshalBinary(b []byte) error {
	var res Project
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
