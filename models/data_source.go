// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataSource DataSource is object model for data source
//
// A DataSource represents a logical IoT Sensor or Gateway.
// Note: this is merely a grouping construct to hold meta info
// for sensors. The act of defining DataSource does not cause
// the mqtt message to flow into Kafka. To do that, one must
// 'tap' into the DataSource by creating DataStreams.
// swagger:model DataSource
type DataSource struct {

	// Type of authentication used by sensor
	// Required: true
	// Enum: [CERTIFICATE PASSWORD TOKEN]
	AuthType *string `json:"authType"`

	// Sensor connection type.
	// Either Secure or Unsecure
	// Required: true
	// Enum: [Secure Unsecure]
	Connection *string `json:"connection"`

	// edge ID
	// Required: true
	EdgeID *string `json:"edgeId"`

	// User defined fields to extract data from the mqtt payload.
	// Required: true
	Fields []*DataSourceFieldInfo `json:"fields"`

	// ID
	ID string `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// Sensor protocol
	// Required: true
	// Enum: [MQTT RTSP GIGEVISION OTHER]
	Protocol *string `json:"protocol"`

	// A list of DataSourceFieldSelector user assigned to the DataSource
	// to allow user to use Category selectors to identify
	// source to a DataStream.
	// Selectors with different category id are combined with AND,
	// while selectors with the same category id are combined with OR.
	// Required: true
	Selectors []*DataSourceFieldSelector `json:"selectors"`

	// Sensor model
	// This is specific to .NEXT Nice.
	// Since we can't currently detect sensor capability,
	// we will have a list of supported sensorModel values
	// which maps to predefined sensor payload format.
	// Required: true
	SensorModel *string `json:"sensorModel"`

	// type of the DataSource.
	// Either Sensor or Gateway
	// Required: true
	// Enum: [Sensor Gateway]
	Type *string `json:"type"`
}

// Validate validates this data source
func (m *DataSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensorModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataSourceTypeAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CERTIFICATE","PASSWORD","TOKEN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSourceTypeAuthTypePropEnum = append(dataSourceTypeAuthTypePropEnum, v)
	}
}

const (

	// DataSourceAuthTypeCERTIFICATE captures enum value "CERTIFICATE"
	DataSourceAuthTypeCERTIFICATE string = "CERTIFICATE"

	// DataSourceAuthTypePASSWORD captures enum value "PASSWORD"
	DataSourceAuthTypePASSWORD string = "PASSWORD"

	// DataSourceAuthTypeTOKEN captures enum value "TOKEN"
	DataSourceAuthTypeTOKEN string = "TOKEN"
)

// prop value enum
func (m *DataSource) validateAuthTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataSourceTypeAuthTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataSource) validateAuthType(formats strfmt.Registry) error {

	if err := validate.Required("authType", "body", m.AuthType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAuthTypeEnum("authType", "body", *m.AuthType); err != nil {
		return err
	}

	return nil
}

var dataSourceTypeConnectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Secure","Unsecure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSourceTypeConnectionPropEnum = append(dataSourceTypeConnectionPropEnum, v)
	}
}

const (

	// DataSourceConnectionSecure captures enum value "Secure"
	DataSourceConnectionSecure string = "Secure"

	// DataSourceConnectionUnsecure captures enum value "Unsecure"
	DataSourceConnectionUnsecure string = "Unsecure"
)

// prop value enum
func (m *DataSource) validateConnectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataSourceTypeConnectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataSource) validateConnection(formats strfmt.Registry) error {

	if err := validate.Required("connection", "body", m.Connection); err != nil {
		return err
	}

	// value enum
	if err := m.validateConnectionEnum("connection", "body", *m.Connection); err != nil {
		return err
	}

	return nil
}

func (m *DataSource) validateEdgeID(formats strfmt.Registry) error {

	if err := validate.Required("edgeId", "body", m.EdgeID); err != nil {
		return err
	}

	return nil
}

func (m *DataSource) validateFields(formats strfmt.Registry) error {

	if err := validate.Required("fields", "body", m.Fields); err != nil {
		return err
	}

	for i := 0; i < len(m.Fields); i++ {
		if swag.IsZero(m.Fields[i]) { // not required
			continue
		}

		if m.Fields[i] != nil {
			if err := m.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataSource) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var dataSourceTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MQTT","RTSP","GIGEVISION","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSourceTypeProtocolPropEnum = append(dataSourceTypeProtocolPropEnum, v)
	}
}

const (

	// DataSourceProtocolMQTT captures enum value "MQTT"
	DataSourceProtocolMQTT string = "MQTT"

	// DataSourceProtocolRTSP captures enum value "RTSP"
	DataSourceProtocolRTSP string = "RTSP"

	// DataSourceProtocolGIGEVISION captures enum value "GIGEVISION"
	DataSourceProtocolGIGEVISION string = "GIGEVISION"

	// DataSourceProtocolOTHER captures enum value "OTHER"
	DataSourceProtocolOTHER string = "OTHER"
)

// prop value enum
func (m *DataSource) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataSourceTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataSource) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *DataSource) validateSelectors(formats strfmt.Registry) error {

	if err := validate.Required("selectors", "body", m.Selectors); err != nil {
		return err
	}

	for i := 0; i < len(m.Selectors); i++ {
		if swag.IsZero(m.Selectors[i]) { // not required
			continue
		}

		if m.Selectors[i] != nil {
			if err := m.Selectors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("selectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataSource) validateSensorModel(formats strfmt.Registry) error {

	if err := validate.Required("sensorModel", "body", m.SensorModel); err != nil {
		return err
	}

	return nil
}

var dataSourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sensor","Gateway"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSourceTypeTypePropEnum = append(dataSourceTypeTypePropEnum, v)
	}
}

const (

	// DataSourceTypeSensor captures enum value "Sensor"
	DataSourceTypeSensor string = "Sensor"

	// DataSourceTypeGateway captures enum value "Gateway"
	DataSourceTypeGateway string = "Gateway"
)

// prop value enum
func (m *DataSource) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataSourceTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataSource) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataSource) UnmarshalBinary(b []byte) error {
	var res DataSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
